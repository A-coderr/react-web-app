{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultAppConfiguration = exports.defaultAppSettings = exports.sqlSettingsSchema = exports.authenticationSettingsSchema = void 0;\nexports.authenticationSettingsSchema = {\n  type: 'object',\n  required: ['secret', 'entity', 'authStrategies'],\n  properties: {\n    secret: {\n      type: 'string',\n      description: 'The JWT signing secret'\n    },\n    entity: {\n      oneOf: [{\n        type: 'null'\n      }, {\n        type: 'string'\n      }],\n      description: 'The name of the authentication entity (e.g. user)'\n    },\n    entityId: {\n      type: 'string',\n      description: 'The name of the authentication entity id property'\n    },\n    service: {\n      type: 'string',\n      description: 'The path of the entity service'\n    },\n    authStrategies: {\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      description: 'A list of authentication strategy names that are allowed to create JWT access tokens'\n    },\n    parseStrategies: {\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      description: 'A list of authentication strategy names that should parse HTTP headers for authentication information (defaults to `authStrategies`)'\n    },\n    jwtOptions: {\n      type: 'object'\n    },\n    jwt: {\n      type: 'object',\n      properties: {\n        header: {\n          type: 'string',\n          default: 'Authorization',\n          description: 'The HTTP header containing the JWT'\n        },\n        schemes: {\n          type: 'array',\n          items: {\n            type: 'string'\n          },\n          description: 'An array of schemes to support'\n        }\n      }\n    },\n    local: {\n      type: 'object',\n      required: ['usernameField', 'passwordField'],\n      properties: {\n        usernameField: {\n          type: 'string',\n          description: 'Name of the username field (e.g. `email`)'\n        },\n        passwordField: {\n          type: 'string',\n          description: 'Name of the password field (e.g. `password`)'\n        },\n        hashSize: {\n          type: 'number',\n          description: 'The BCrypt salt length'\n        },\n        errorMessage: {\n          type: 'string',\n          default: 'Invalid login',\n          description: 'The error message to return on errors'\n        },\n        entityUsernameField: {\n          type: 'string',\n          description: 'Name of the username field on the entity if authentication request data and entity field names are different'\n        },\n        entityPasswordField: {\n          type: 'string',\n          description: 'Name of the password field on the entity if authentication request data and entity field names are different'\n        }\n      }\n    },\n    oauth: {\n      type: 'object',\n      properties: {\n        redirect: {\n          type: 'string'\n        },\n        origins: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        },\n        defaults: {\n          type: 'object',\n          properties: {\n            key: {\n              type: 'string'\n            },\n            secret: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }\n};\nexports.sqlSettingsSchema = {\n  type: 'object',\n  properties: {\n    client: {\n      type: 'string'\n    },\n    pool: {\n      type: 'object',\n      properties: {\n        min: {\n          type: 'number'\n        },\n        max: {\n          type: 'number'\n        }\n      }\n    },\n    connection: {\n      oneOf: [{\n        type: 'string'\n      }, {\n        type: 'object',\n        properties: {\n          host: {\n            type: 'string'\n          },\n          port: {\n            type: 'number'\n          },\n          user: {\n            type: 'string'\n          },\n          password: {\n            type: 'string'\n          },\n          database: {\n            type: 'string'\n          }\n        }\n      }]\n    }\n  }\n};\n/**\n * Schema for properties that are available in a standard Feathers application.\n */\nexports.defaultAppSettings = {\n  authentication: exports.authenticationSettingsSchema,\n  origins: {\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  },\n  paginate: {\n    type: 'object',\n    additionalProperties: false,\n    required: ['default', 'max'],\n    properties: {\n      default: {\n        type: 'number'\n      },\n      max: {\n        type: 'number'\n      }\n    }\n  },\n  mongodb: {\n    type: 'string'\n  },\n  mysql: exports.sqlSettingsSchema,\n  postgresql: exports.sqlSettingsSchema,\n  sqlite: exports.sqlSettingsSchema,\n  mssql: exports.sqlSettingsSchema\n};\nexports.defaultAppConfiguration = {\n  type: 'object',\n  additionalProperties: false,\n  properties: exports.defaultAppSettings\n};","map":{"version":3,"names":["exports","authenticationSettingsSchema","type","required","properties","secret","description","entity","oneOf","entityId","service","authStrategies","items","parseStrategies","jwtOptions","jwt","header","default","schemes","local","usernameField","passwordField","hashSize","errorMessage","entityUsernameField","entityPasswordField","oauth","redirect","origins","defaults","key","sqlSettingsSchema","client","pool","min","max","connection","host","port","user","password","database","defaultAppSettings","authentication","paginate","additionalProperties","mongodb","mysql","postgresql","sqlite","mssql","defaultAppConfiguration"],"sources":["C:\\Users\\VARLab ROG 1\\Documents\\workspace\\web\\react-frontend\\node_modules\\@feathersjs\\authentication\\node_modules\\@feathersjs\\schema\\src\\default-schemas.ts"],"sourcesContent":["import { FromSchema } from 'json-schema-to-ts'\n\nexport const authenticationSettingsSchema = {\n  type: 'object',\n  required: ['secret', 'entity', 'authStrategies'],\n  properties: {\n    secret: {\n      type: 'string',\n      description: 'The JWT signing secret'\n    },\n    entity: {\n      oneOf: [\n        {\n          type: 'null'\n        },\n        {\n          type: 'string'\n        }\n      ],\n      description: 'The name of the authentication entity (e.g. user)'\n    },\n    entityId: {\n      type: 'string',\n      description: 'The name of the authentication entity id property'\n    },\n    service: {\n      type: 'string',\n      description: 'The path of the entity service'\n    },\n    authStrategies: {\n      type: 'array',\n      items: { type: 'string' },\n      description: 'A list of authentication strategy names that are allowed to create JWT access tokens'\n    },\n    parseStrategies: {\n      type: 'array',\n      items: { type: 'string' },\n      description:\n        'A list of authentication strategy names that should parse HTTP headers for authentication information (defaults to `authStrategies`)'\n    },\n    jwtOptions: {\n      type: 'object'\n    },\n    jwt: {\n      type: 'object',\n      properties: {\n        header: {\n          type: 'string',\n          default: 'Authorization',\n          description: 'The HTTP header containing the JWT'\n        },\n        schemes: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'An array of schemes to support'\n        }\n      }\n    },\n    local: {\n      type: 'object',\n      required: ['usernameField', 'passwordField'],\n      properties: {\n        usernameField: {\n          type: 'string',\n          description: 'Name of the username field (e.g. `email`)'\n        },\n        passwordField: {\n          type: 'string',\n          description: 'Name of the password field (e.g. `password`)'\n        },\n        hashSize: {\n          type: 'number',\n          description: 'The BCrypt salt length'\n        },\n        errorMessage: {\n          type: 'string',\n          default: 'Invalid login',\n          description: 'The error message to return on errors'\n        },\n        entityUsernameField: {\n          type: 'string',\n          description:\n            'Name of the username field on the entity if authentication request data and entity field names are different'\n        },\n        entityPasswordField: {\n          type: 'string',\n          description:\n            'Name of the password field on the entity if authentication request data and entity field names are different'\n        }\n      }\n    },\n    oauth: {\n      type: 'object',\n      properties: {\n        redirect: {\n          type: 'string'\n        },\n        origins: {\n          type: 'array',\n          items: { type: 'string' }\n        },\n        defaults: {\n          type: 'object',\n          properties: {\n            key: { type: 'string' },\n            secret: { type: 'string' }\n          }\n        }\n      }\n    }\n  }\n} as const\n\nexport type AuthenticationConfiguration = FromSchema<typeof authenticationSettingsSchema>\n\nexport const sqlSettingsSchema = {\n  type: 'object',\n  properties: {\n    client: { type: 'string' },\n    pool: {\n      type: 'object',\n      properties: {\n        min: { type: 'number' },\n        max: { type: 'number' }\n      }\n    },\n    connection: {\n      oneOf: [\n        { type: 'string' },\n        {\n          type: 'object',\n          properties: {\n            host: { type: 'string' },\n            port: { type: 'number' },\n            user: { type: 'string' },\n            password: { type: 'string' },\n            database: { type: 'string' }\n          }\n        }\n      ]\n    }\n  }\n} as const\n\n/**\n * Schema for properties that are available in a standard Feathers application.\n */\nexport const defaultAppSettings = {\n  authentication: authenticationSettingsSchema,\n  origins: {\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  },\n  paginate: {\n    type: 'object',\n    additionalProperties: false,\n    required: ['default', 'max'],\n    properties: {\n      default: { type: 'number' },\n      max: { type: 'number' }\n    }\n  },\n  mongodb: { type: 'string' },\n  mysql: sqlSettingsSchema,\n  postgresql: sqlSettingsSchema,\n  sqlite: sqlSettingsSchema,\n  mssql: sqlSettingsSchema\n} as const\n\nexport const defaultAppConfiguration = {\n  type: 'object',\n  additionalProperties: false,\n  properties: defaultAppSettings\n} as const\n\nexport type DefaultAppConfiguration = FromSchema<typeof defaultAppConfiguration>\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}