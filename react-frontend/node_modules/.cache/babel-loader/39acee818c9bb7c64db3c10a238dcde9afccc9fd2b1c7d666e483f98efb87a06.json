{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["C:\\Users\\VARLab ROG 1\\Documents\\workspace\\web\\react-frontend\\node_modules\\@feathersjs\\adapter-commons\\src\\declarations.ts"],"sourcesContent":["import { Query, Params, Paginated, Id, PaginationParams, PaginationOptions } from '@feathersjs/feathers'\n\nexport type FilterQueryOptions = {\n  filters?: FilterSettings\n  operators?: string[]\n  paginate?: PaginationParams\n}\n\nexport type QueryFilter = (value: any, options: FilterQueryOptions) => any\n\nexport type FilterSettings = {\n  [key: string]: QueryFilter | true\n}\n\n// re-export from @feathersjs/feathers to prevent breaking changes\nexport { PaginationOptions, PaginationParams }\n\nexport interface AdapterServiceOptions {\n  /**\n   * Whether to allow multiple updates for everything (`true`) or specific methods (e.g. `['create', 'remove']`)\n   */\n  multi?: boolean | string[]\n  /**\n   * The name of the id property\n   */\n  id?: string\n  /**\n   * Pagination settings for this service\n   */\n  paginate?: PaginationParams\n  /**\n   * A list of additional property query operators to allow in a query\n   *\n   * @deprecated No longer needed when a query schema is used\n   */\n  operators?: string[]\n  /**\n   * An object of additional top level query filters, e.g. `{ $populate: true }`\n   * Can also be a converter function like `{ $ignoreCase: (value) => value === 'true' ? true : false }`\n   *\n   * @deprecated No longer needed when a query schema is used\n   */\n  filters?: FilterSettings\n  /**\n   * @deprecated Use service `events` option when registering the service with `app.use`.\n   */\n  events?: string[]\n  /**\n   * @deprecated No longer needed when a query schema is used\n   */\n  whitelist?: string[]\n}\n\nexport interface AdapterQuery extends Query {\n  $limit?: number\n  $skip?: number\n  $select?: string[]\n  $sort?: { [key: string]: 1 | -1 }\n}\n/**\n * Additional `params` that can be passed to an adapter service method call.\n */\nexport interface AdapterParams<\n  Q = AdapterQuery,\n  A extends Partial<AdapterServiceOptions> = Partial<AdapterServiceOptions>\n> extends Params<Q> {\n  adapter?: A\n  paginate?: PaginationParams\n}\n\n/**\n * Hook-less (internal) service methods. Directly call database adapter service methods\n * without running any service-level hooks or sanitization. This can be useful if you need the raw data\n * from the service and don't want to trigger any of its hooks.\n *\n * Important: These methods are only available internally on the server, not on the client\n * side and only for the Feathers database adapters.\n *\n * These methods do not trigger events.\n *\n * @see {@link https://docs.feathersjs.com/guides/migrating.html#hook-less-service-methods}\n */\nexport interface InternalServiceMethods<\n  Result = any,\n  Data = Result,\n  PatchData = Partial<Data>,\n  Params extends AdapterParams = AdapterParams,\n  IdType = Id\n> {\n  /**\n   * Retrieve all resources from this service.\n   * Does not sanitize the query and should only be used on the server.\n   *\n   * @param _params - Service call parameters {@link Params}\n   */\n  _find(_params?: Params & { paginate?: PaginationOptions }): Promise<Paginated<Result>>\n  _find(_params?: Params & { paginate: false }): Promise<Result[]>\n  _find(params?: Params): Promise<Result[] | Paginated<Result>>\n\n  /**\n   * Retrieve a single resource matching the given ID, skipping any service-level hooks.\n   * Does not sanitize the query and should only be used on the server.\n   *\n   * @param id - ID of the resource to locate\n   * @param params - Service call parameters {@link Params}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#get-id-params|Feathers API Documentation: .get(id, params)}\n   */\n  _get(id: IdType, params?: Params): Promise<Result>\n\n  /**\n   * Create a new resource for this service, skipping any service-level hooks.\n   * Does not sanitize data or checks if multiple updates are allowed and should only be used on the server.\n   *\n   * @param data - Data to insert into this service.\n   * @param params - Service call parameters {@link Params}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#create-data-params|Feathers API Documentation: .create(data, params)}\n   */\n  _create(data: Data, params?: Params): Promise<Result>\n  _create(data: Data[], params?: Params): Promise<Result[]>\n  _create(data: Data | Data[], params?: Params): Promise<Result | Result[]>\n\n  /**\n   * Completely replace the resource identified by id, skipping any service-level hooks.\n   * Does not sanitize data or query and should only be used on the server.\n   *\n   * @param id - ID of the resource to be updated\n   * @param data - Data to be put in place of the current resource.\n   * @param params - Service call parameters {@link Params}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#update-id-data-params|Feathers API Documentation: .update(id, data, params)}\n   */\n  _update(id: IdType, data: Data, params?: Params): Promise<Result>\n\n  /**\n   * Merge any resources matching the given ID with the given data, skipping any service-level hooks.\n   * Does not sanitize the data or query and should only be used on the server.\n   *\n   * @param id - ID of the resource to be patched\n   * @param data - Data to merge with the current resource.\n   * @param params - Service call parameters {@link Params}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#patch-id-data-params|Feathers API Documentation: .patch(id, data, params)}\n   */\n  _patch(id: null, data: PatchData, params?: Params): Promise<Result[]>\n  _patch(id: IdType, data: PatchData, params?: Params): Promise<Result>\n  _patch(id: IdType | null, data: PatchData, params?: Params): Promise<Result | Result[]>\n\n  /**\n   * Remove resources matching the given ID from the this service, skipping any service-level hooks.\n   * Does not sanitize query and should only be used on the server.\n   *\n   * @param id - ID of the resource to be removed\n   * @param params - Service call parameters {@link Params}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#remove-id-params|Feathers API Documentation: .remove(id, params)}\n   */\n  _remove(id: null, params?: Params): Promise<Result[]>\n  _remove(id: IdType, params?: Params): Promise<Result>\n  _remove(id: IdType | null, params?: Params): Promise<Result | Result[]>\n}\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}