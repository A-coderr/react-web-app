{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterQuery = exports.FILTERS = exports.OPERATORS = exports.getLimit = void 0;\nconst commons_1 = require(\"@feathersjs/commons\");\nconst errors_1 = require(\"@feathersjs/errors\");\nconst parse = value => typeof value !== 'undefined' ? parseInt(value, 10) : value;\nconst isPlainObject = value => commons_1._.isObject(value) && value.constructor === {}.constructor;\nconst validateQueryProperty = (query, operators = []) => {\n  if (!isPlainObject(query)) {\n    return query;\n  }\n  for (const key of Object.keys(query)) {\n    if (key.startsWith('$') && !operators.includes(key)) {\n      throw new errors_1.BadRequest(`Invalid query parameter ${key}`, query);\n    }\n    const value = query[key];\n    if (isPlainObject(value)) {\n      query[key] = validateQueryProperty(value, operators);\n    }\n  }\n  return {\n    ...query\n  };\n};\nconst getFilters = (query, settings) => {\n  const filterNames = Object.keys(settings.filters);\n  return filterNames.reduce((current, key) => {\n    const queryValue = query[key];\n    const filter = settings.filters[key];\n    if (filter) {\n      const value = typeof filter === 'function' ? filter(queryValue, settings) : queryValue;\n      if (value !== undefined) {\n        current[key] = value;\n      }\n    }\n    return current;\n  }, {});\n};\nconst getQuery = (query, settings) => {\n  const keys = Object.keys(query).concat(Object.getOwnPropertySymbols(query));\n  return keys.reduce((result, key) => {\n    if (typeof key === 'string' && key.startsWith('$')) {\n      if (settings.filters[key] === undefined) {\n        throw new errors_1.BadRequest(`Invalid filter value ${key}`);\n      }\n    } else {\n      result[key] = validateQueryProperty(query[key], settings.operators);\n    }\n    return result;\n  }, {});\n};\n/**\n * Returns the converted `$limit` value based on the `paginate` configuration.\n * @param _limit The limit value\n * @param paginate The pagination options\n * @returns The converted $limit value\n */\nconst getLimit = (_limit, paginate) => {\n  const limit = parse(_limit);\n  if (paginate && (paginate.default || paginate.max)) {\n    const base = paginate.default || 0;\n    const lower = typeof limit === 'number' && !isNaN(limit) && limit >= 0 ? limit : base;\n    const upper = typeof paginate.max === 'number' ? paginate.max : Number.MAX_VALUE;\n    return Math.min(lower, upper);\n  }\n  return limit;\n};\nexports.getLimit = getLimit;\nexports.OPERATORS = ['$in', '$nin', '$lt', '$lte', '$gt', '$gte', '$ne', '$or'];\nexports.FILTERS = {\n  $skip: value => parse(value),\n  $sort: sort => {\n    if (typeof sort !== 'object' || Array.isArray(sort)) {\n      return sort;\n    }\n    return Object.keys(sort).reduce((result, key) => {\n      result[key] = typeof sort[key] === 'object' ? sort[key] : parse(sort[key]);\n      return result;\n    }, {});\n  },\n  $limit: (_limit, {\n    paginate\n  }) => (0, exports.getLimit)(_limit, paginate),\n  $select: select => {\n    if (Array.isArray(select)) {\n      return select.map(current => `${current}`);\n    }\n    return select;\n  },\n  $or: (or, {\n    operators\n  }) => {\n    if (Array.isArray(or)) {\n      return or.map(current => validateQueryProperty(current, operators));\n    }\n    return or;\n  },\n  $and: (and, {\n    operators\n  }) => {\n    if (Array.isArray(and)) {\n      return and.map(current => validateQueryProperty(current, operators));\n    }\n    return and;\n  }\n};\n/**\n * Converts Feathers special query parameters and pagination settings\n * and returns them separately as `filters` and the rest of the query\n * as `query`. `options` also gets passed the pagination settings and\n * a list of additional `operators` to allow when querying properties.\n *\n * @param query The initial query\n * @param options Options for filtering the query\n * @returns An object with `query` which contains the query without `filters`\n * and `filters` which contains the converted values for each filter.\n */\nfunction filterQuery(_query, options = {}) {\n  const query = _query || {};\n  const settings = {\n    ...options,\n    filters: {\n      ...exports.FILTERS,\n      ...options.filters\n    },\n    operators: exports.OPERATORS.concat(options.operators || [])\n  };\n  return {\n    filters: getFilters(query, settings),\n    query: getQuery(query, settings)\n  };\n}\nexports.filterQuery = filterQuery;","map":{"version":3,"names":["commons_1","require","errors_1","parse","value","parseInt","isPlainObject","_","isObject","constructor","validateQueryProperty","query","operators","key","Object","keys","startsWith","includes","BadRequest","getFilters","settings","filterNames","filters","reduce","current","queryValue","filter","undefined","getQuery","concat","getOwnPropertySymbols","result","getLimit","_limit","paginate","limit","default","max","base","lower","isNaN","upper","Number","MAX_VALUE","Math","min","exports","OPERATORS","FILTERS","$skip","$sort","sort","Array","isArray","$limit","$select","select","map","$or","or","$and","and","filterQuery","_query","options"],"sources":["C:\\Users\\VARLab ROG 1\\Documents\\workspace\\web\\react-frontend\\node_modules\\@feathersjs\\adapter-commons\\src\\query.ts"],"sourcesContent":["import { _ } from '@feathersjs/commons'\nimport { BadRequest } from '@feathersjs/errors'\nimport { Query } from '@feathersjs/feathers'\nimport { FilterQueryOptions, FilterSettings, PaginationParams } from './declarations'\n\nconst parse = (value: any) => (typeof value !== 'undefined' ? parseInt(value, 10) : value)\n\nconst isPlainObject = (value: any) => _.isObject(value) && value.constructor === {}.constructor\n\nconst validateQueryProperty = (query: any, operators: string[] = []): Query => {\n  if (!isPlainObject(query)) {\n    return query\n  }\n\n  for (const key of Object.keys(query)) {\n    if (key.startsWith('$') && !operators.includes(key)) {\n      throw new BadRequest(`Invalid query parameter ${key}`, query)\n    }\n\n    const value = query[key]\n\n    if (isPlainObject(value)) {\n      query[key] = validateQueryProperty(value, operators)\n    }\n  }\n\n  return {\n    ...query\n  }\n}\n\nconst getFilters = (query: Query, settings: FilterQueryOptions) => {\n  const filterNames = Object.keys(settings.filters)\n\n  return filterNames.reduce(\n    (current, key) => {\n      const queryValue = query[key]\n      const filter = settings.filters[key]\n\n      if (filter) {\n        const value = typeof filter === 'function' ? filter(queryValue, settings) : queryValue\n\n        if (value !== undefined) {\n          current[key] = value\n        }\n      }\n\n      return current\n    },\n    {} as { [key: string]: any }\n  )\n}\n\nconst getQuery = (query: Query, settings: FilterQueryOptions) => {\n  const keys = Object.keys(query).concat(Object.getOwnPropertySymbols(query) as any as string[])\n\n  return keys.reduce((result, key) => {\n    if (typeof key === 'string' && key.startsWith('$')) {\n      if (settings.filters[key] === undefined) {\n        throw new BadRequest(`Invalid filter value ${key}`)\n      }\n    } else {\n      result[key] = validateQueryProperty(query[key], settings.operators)\n    }\n\n    return result\n  }, {} as Query)\n}\n\n/**\n * Returns the converted `$limit` value based on the `paginate` configuration.\n * @param _limit The limit value\n * @param paginate The pagination options\n * @returns The converted $limit value\n */\nexport const getLimit = (_limit: any, paginate?: PaginationParams) => {\n  const limit = parse(_limit)\n\n  if (paginate && (paginate.default || paginate.max)) {\n    const base = paginate.default || 0\n    const lower = typeof limit === 'number' && !isNaN(limit) && limit >= 0 ? limit : base\n    const upper = typeof paginate.max === 'number' ? paginate.max : Number.MAX_VALUE\n\n    return Math.min(lower, upper)\n  }\n\n  return limit\n}\n\nexport const OPERATORS = ['$in', '$nin', '$lt', '$lte', '$gt', '$gte', '$ne', '$or']\n\nexport const FILTERS: FilterSettings = {\n  $skip: (value: any) => parse(value),\n  $sort: (sort: any): { [key: string]: number } => {\n    if (typeof sort !== 'object' || Array.isArray(sort)) {\n      return sort\n    }\n\n    return Object.keys(sort).reduce(\n      (result, key) => {\n        result[key] = typeof sort[key] === 'object' ? sort[key] : parse(sort[key])\n\n        return result\n      },\n      {} as { [key: string]: number }\n    )\n  },\n  $limit: (_limit: any, { paginate }: FilterQueryOptions) => getLimit(_limit, paginate),\n  $select: (select: any) => {\n    if (Array.isArray(select)) {\n      return select.map((current) => `${current}`)\n    }\n\n    return select\n  },\n  $or: (or: any, { operators }: FilterQueryOptions) => {\n    if (Array.isArray(or)) {\n      return or.map((current) => validateQueryProperty(current, operators))\n    }\n\n    return or\n  },\n  $and: (and: any, { operators }: FilterQueryOptions) => {\n    if (Array.isArray(and)) {\n      return and.map((current) => validateQueryProperty(current, operators))\n    }\n\n    return and\n  }\n}\n\n/**\n * Converts Feathers special query parameters and pagination settings\n * and returns them separately as `filters` and the rest of the query\n * as `query`. `options` also gets passed the pagination settings and\n * a list of additional `operators` to allow when querying properties.\n *\n * @param query The initial query\n * @param options Options for filtering the query\n * @returns An object with `query` which contains the query without `filters`\n * and `filters` which contains the converted values for each filter.\n */\nexport function filterQuery(_query: Query, options: FilterQueryOptions = {}) {\n  const query = _query || {}\n  const settings = {\n    ...options,\n    filters: {\n      ...FILTERS,\n      ...options.filters\n    },\n    operators: OPERATORS.concat(options.operators || [])\n  }\n\n  return {\n    filters: getFilters(query, settings),\n    query: getQuery(query, settings)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}