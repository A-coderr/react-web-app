{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthenticationService = void 0;\nconst merge_1 = __importDefault(require(\"lodash/merge\"));\nconst errors_1 = require(\"@feathersjs/errors\");\nrequire(\"@feathersjs/transport-commons\");\nconst commons_1 = require(\"@feathersjs/commons\");\nconst schema_1 = require(\"@feathersjs/schema\");\nconst jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\nconst hooks_1 = require(\"@feathersjs/hooks\");\nconst core_1 = require(\"./core\");\nconst hooks_2 = require(\"./hooks\");\nconst debug = (0, commons_1.createDebug)('@feathersjs/authentication/service');\nclass AuthenticationService extends core_1.AuthenticationBase {\n  constructor(app, configKey = 'authentication', options = {}) {\n    super(app, configKey, options);\n    (0, hooks_1.hooks)(this, {\n      create: [(0, schema_1.resolveDispatch)(), (0, hooks_2.event)('login'), (0, hooks_2.connection)('login')],\n      remove: [(0, schema_1.resolveDispatch)(), (0, hooks_2.event)('logout'), (0, hooks_2.connection)('logout')]\n    });\n    this.app.on('disconnect', async connection => {\n      await this.handleConnection('disconnect', connection);\n    });\n    if (typeof app.defaultAuthentication !== 'function') {\n      app.defaultAuthentication = function (location) {\n        const configKey = app.get('defaultAuthentication');\n        const path = location || Object.keys(this.services).find(current => this.service(current).configKey === configKey);\n        return path ? this.service(path) : null;\n      };\n    }\n  }\n  /**\n   * Return the payload for a JWT based on the authentication result.\n   * Called internally by the `create` method.\n   *\n   * @param _authResult The current authentication result\n   * @param params The service call parameters\n   */\n  async getPayload(_authResult, params) {\n    // Uses `params.payload` or returns an empty payload\n    const {\n      payload = {}\n    } = params;\n    return payload;\n  }\n  /**\n   * Returns the JWT options based on an authentication result.\n   * By default sets the JWT subject to the entity id.\n   *\n   * @param authResult The authentication result\n   * @param params Service call parameters\n   */\n  async getTokenOptions(authResult, params) {\n    const {\n      service,\n      entity,\n      entityId\n    } = this.configuration;\n    const jwtOptions = (0, merge_1.default)({}, params.jwtOptions, params.jwt);\n    const value = service && entity && authResult[entity];\n    // Set the subject to the entity id if it is available\n    if (value && !jwtOptions.subject) {\n      const idProperty = entityId || this.app.service(service).id;\n      const subject = value[idProperty];\n      if (subject === undefined) {\n        throw new errors_1.NotAuthenticated(`Can not set subject from ${entity}.${idProperty}`);\n      }\n      jwtOptions.subject = `${subject}`;\n    }\n    return jwtOptions;\n  }\n  /**\n   * Create and return a new JWT for a given authentication request.\n   * Will trigger the `login` event.\n   *\n   * @param data The authentication request (should include `strategy` key)\n   * @param params Service call parameters\n   */\n  async create(data, params) {\n    const authStrategies = params.authStrategies || this.configuration.authStrategies;\n    if (!authStrategies.length) {\n      throw new errors_1.NotAuthenticated('No authentication strategies allowed for creating a JWT (`authStrategies`)');\n    }\n    const authResult = await this.authenticate(data, params, ...authStrategies);\n    debug('Got authentication result', authResult);\n    if (authResult.accessToken) {\n      return authResult;\n    }\n    const [payload, jwtOptions] = await Promise.all([this.getPayload(authResult, params), this.getTokenOptions(authResult, params)]);\n    debug('Creating JWT with', payload, jwtOptions);\n    const accessToken = await this.createAccessToken(payload, jwtOptions, params.secret);\n    return {\n      accessToken,\n      ...authResult,\n      authentication: {\n        ...authResult.authentication,\n        payload: jsonwebtoken_1.default.decode(accessToken)\n      }\n    };\n  }\n  /**\n   * Mark a JWT as removed. By default only verifies the JWT and returns the result.\n   * Triggers the `logout` event.\n   *\n   * @param id The JWT to remove or null\n   * @param params Service call parameters\n   */\n  async remove(id, params) {\n    const {\n      authentication\n    } = params;\n    const {\n      authStrategies\n    } = this.configuration;\n    // When an id is passed it is expected to be the authentication `accessToken`\n    if (id !== null && id !== authentication.accessToken) {\n      throw new errors_1.NotAuthenticated('Invalid access token');\n    }\n    debug('Verifying authentication strategy in remove');\n    return this.authenticate(authentication, params, ...authStrategies);\n  }\n  /**\n   * Validates the service configuration.\n   */\n  async setup() {\n    await super.setup();\n    // The setup method checks for valid settings and registers the\n    // connection and event (login, logout) hooks\n    const {\n      secret,\n      service,\n      entity,\n      entityId\n    } = this.configuration;\n    if (typeof secret !== 'string') {\n      throw new Error(\"A 'secret' must be provided in your authentication configuration\");\n    }\n    if (entity !== null) {\n      if (service === undefined) {\n        throw new Error(\"The 'service' option is not set in the authentication configuration\");\n      }\n      if (this.app.service(service) === undefined) {\n        throw new Error(`The '${service}' entity service does not exist (set to 'null' if it is not required)`);\n      }\n      if (this.app.service(service).id === undefined && entityId === undefined) {\n        throw new Error(`The '${service}' service does not have an 'id' property and no 'entityId' option is set.`);\n      }\n    }\n    const publishable = this;\n    if (typeof publishable.publish === 'function') {\n      publishable.publish(() => null);\n    }\n  }\n}\nexports.AuthenticationService = AuthenticationService;","map":{"version":3,"names":["merge_1","__importDefault","require","errors_1","commons_1","schema_1","jsonwebtoken_1","hooks_1","core_1","hooks_2","debug","createDebug","AuthenticationService","AuthenticationBase","constructor","app","configKey","options","hooks","create","resolveDispatch","event","connection","remove","on","handleConnection","defaultAuthentication","location","get","path","Object","keys","services","find","current","service","getPayload","_authResult","params","payload","getTokenOptions","authResult","entity","entityId","configuration","jwtOptions","default","jwt","value","subject","idProperty","id","undefined","NotAuthenticated","data","authStrategies","length","authenticate","accessToken","Promise","all","createAccessToken","secret","authentication","decode","setup","Error","publishable","publish","exports"],"sources":["C:\\Users\\VARLab ROG 1\\Documents\\workspace\\web\\react-frontend\\node_modules\\@feathersjs\\authentication\\src\\service.ts"],"sourcesContent":["import merge from 'lodash/merge'\nimport { NotAuthenticated } from '@feathersjs/errors'\nimport '@feathersjs/transport-commons'\nimport { createDebug } from '@feathersjs/commons'\nimport { ServiceMethods } from '@feathersjs/feathers'\nimport { resolveDispatch } from '@feathersjs/schema'\nimport jsonwebtoken from 'jsonwebtoken'\nimport { hooks } from '@feathersjs/hooks'\n\nimport { AuthenticationBase, AuthenticationResult, AuthenticationRequest, AuthenticationParams } from './core'\nimport { connection, event } from './hooks'\nimport { RealTimeConnection } from '@feathersjs/feathers'\n\nconst debug = createDebug('@feathersjs/authentication/service')\n\ndeclare module '@feathersjs/feathers/lib/declarations' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface FeathersApplication<Services, Settings> {\n    // eslint-disable-line\n    /**\n     * Returns the default authentication service or the\n     * authentication service for a given path.\n     *\n     * @param location The service path to use (optional)\n     */\n    defaultAuthentication?(location?: string): AuthenticationService\n  }\n\n  interface Params {\n    authenticated?: boolean\n    authentication?: AuthenticationRequest\n  }\n}\n\nexport class AuthenticationService\n  extends AuthenticationBase\n  implements Partial<ServiceMethods<AuthenticationResult, AuthenticationRequest, AuthenticationParams>>\n{\n  constructor(app: any, configKey = 'authentication', options = {}) {\n    super(app, configKey, options)\n\n    hooks(this, {\n      create: [resolveDispatch(), event('login'), connection('login')],\n      remove: [resolveDispatch(), event('logout'), connection('logout')]\n    })\n\n    this.app.on('disconnect', async (connection: RealTimeConnection) => {\n      await this.handleConnection('disconnect', connection)\n    })\n\n    if (typeof app.defaultAuthentication !== 'function') {\n      app.defaultAuthentication = function (location?: string) {\n        const configKey = app.get('defaultAuthentication')\n        const path =\n          location ||\n          Object.keys(this.services).find((current) => this.service(current).configKey === configKey)\n\n        return path ? this.service(path) : null\n      }\n    }\n  }\n  /**\n   * Return the payload for a JWT based on the authentication result.\n   * Called internally by the `create` method.\n   *\n   * @param _authResult The current authentication result\n   * @param params The service call parameters\n   */\n  async getPayload(_authResult: AuthenticationResult, params: AuthenticationParams) {\n    // Uses `params.payload` or returns an empty payload\n    const { payload = {} } = params\n\n    return payload\n  }\n\n  /**\n   * Returns the JWT options based on an authentication result.\n   * By default sets the JWT subject to the entity id.\n   *\n   * @param authResult The authentication result\n   * @param params Service call parameters\n   */\n  async getTokenOptions(authResult: AuthenticationResult, params: AuthenticationParams) {\n    const { service, entity, entityId } = this.configuration\n    const jwtOptions = merge({}, params.jwtOptions, params.jwt)\n    const value = service && entity && authResult[entity]\n\n    // Set the subject to the entity id if it is available\n    if (value && !jwtOptions.subject) {\n      const idProperty = entityId || this.app.service(service).id\n      const subject = value[idProperty]\n\n      if (subject === undefined) {\n        throw new NotAuthenticated(`Can not set subject from ${entity}.${idProperty}`)\n      }\n\n      jwtOptions.subject = `${subject}`\n    }\n\n    return jwtOptions\n  }\n\n  /**\n   * Create and return a new JWT for a given authentication request.\n   * Will trigger the `login` event.\n   *\n   * @param data The authentication request (should include `strategy` key)\n   * @param params Service call parameters\n   */\n  async create(data: AuthenticationRequest, params?: AuthenticationParams) {\n    const authStrategies = params.authStrategies || this.configuration.authStrategies\n\n    if (!authStrategies.length) {\n      throw new NotAuthenticated('No authentication strategies allowed for creating a JWT (`authStrategies`)')\n    }\n\n    const authResult = await this.authenticate(data, params, ...authStrategies)\n\n    debug('Got authentication result', authResult)\n\n    if (authResult.accessToken) {\n      return authResult\n    }\n\n    const [payload, jwtOptions] = await Promise.all([\n      this.getPayload(authResult, params),\n      this.getTokenOptions(authResult, params)\n    ])\n\n    debug('Creating JWT with', payload, jwtOptions)\n\n    const accessToken = await this.createAccessToken(payload, jwtOptions, params.secret)\n\n    return {\n      accessToken,\n      ...authResult,\n      authentication: {\n        ...authResult.authentication,\n        payload: jsonwebtoken.decode(accessToken)\n      }\n    }\n  }\n\n  /**\n   * Mark a JWT as removed. By default only verifies the JWT and returns the result.\n   * Triggers the `logout` event.\n   *\n   * @param id The JWT to remove or null\n   * @param params Service call parameters\n   */\n  async remove(id: string | null, params?: AuthenticationParams) {\n    const { authentication } = params\n    const { authStrategies } = this.configuration\n\n    // When an id is passed it is expected to be the authentication `accessToken`\n    if (id !== null && id !== authentication.accessToken) {\n      throw new NotAuthenticated('Invalid access token')\n    }\n\n    debug('Verifying authentication strategy in remove')\n\n    return this.authenticate(authentication, params, ...authStrategies)\n  }\n\n  /**\n   * Validates the service configuration.\n   */\n  async setup() {\n    await super.setup()\n\n    // The setup method checks for valid settings and registers the\n    // connection and event (login, logout) hooks\n    const { secret, service, entity, entityId } = this.configuration\n\n    if (typeof secret !== 'string') {\n      throw new Error(\"A 'secret' must be provided in your authentication configuration\")\n    }\n\n    if (entity !== null) {\n      if (service === undefined) {\n        throw new Error(\"The 'service' option is not set in the authentication configuration\")\n      }\n\n      if (this.app.service(service) === undefined) {\n        throw new Error(\n          `The '${service}' entity service does not exist (set to 'null' if it is not required)`\n        )\n      }\n\n      if (this.app.service(service).id === undefined && entityId === undefined) {\n        throw new Error(\n          `The '${service}' service does not have an 'id' property and no 'entityId' option is set.`\n        )\n      }\n    }\n\n    const publishable = this as any\n\n    if (typeof publishable.publish === 'function') {\n      publishable.publish((): any => null)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}