{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AdapterBase = exports.VALIDATED = void 0;\nconst query_1 = require(\"./query\");\nexports.VALIDATED = Symbol.for('@feathersjs/adapter/sanitized');\nconst alwaysMulti = {\n  find: true,\n  get: false,\n  update: false\n};\n/**\n * An abstract base class that a database adapter can extend from to implement the\n * `__find`, `__get`, `__update`, `__patch` and `__remove` methods.\n */\nclass AdapterBase {\n  constructor(options) {\n    this.options = {\n      id: 'id',\n      events: [],\n      paginate: false,\n      multi: false,\n      filters: {},\n      operators: [],\n      ...options\n    };\n  }\n  get id() {\n    return this.options.id;\n  }\n  get events() {\n    return this.options.events;\n  }\n  /**\n   * Check if this adapter allows multiple updates for a method.\n   * @param method The method name to check.\n   * @param params The service call params.\n   * @returns Wether or not multiple updates are allowed.\n   */\n  allowsMulti(method, params = {}) {\n    const always = alwaysMulti[method];\n    if (typeof always !== 'undefined') {\n      return always;\n    }\n    const {\n      multi\n    } = this.getOptions(params);\n    if (multi === true || !multi) {\n      return multi;\n    }\n    return multi.includes(method);\n  }\n  /**\n   * Returns the combined options for a service call. Options will be merged\n   * with `this.options` and `params.adapter` for dynamic overrides.\n   *\n   * @param params The parameters for the service method call\n   * @returns The actual options for this call\n   */\n  getOptions(params) {\n    const paginate = params.paginate !== undefined ? params.paginate : this.options.paginate;\n    return {\n      ...this.options,\n      paginate,\n      ...params.adapter\n    };\n  }\n  /**\n   * Returns a sanitized version of `params.query`, converting filter values\n   * (like $limit and $skip) into the expected type. Will throw an error if\n   * a `$` prefixed filter or operator value that is not allowed in `filters`\n   * or `operators` is encountered.\n   *\n   * @param params The service call parameter.\n   * @returns A new object containing the sanitized query.\n   */\n  async sanitizeQuery(params = {}) {\n    // We don't need legacy query sanitisation if the query has been validated by a schema already\n    if (params.query && params.query[exports.VALIDATED]) {\n      return params.query || {};\n    }\n    const options = this.getOptions(params);\n    const {\n      query,\n      filters\n    } = (0, query_1.filterQuery)(params.query, options);\n    return {\n      ...filters,\n      ...query\n    };\n  }\n}\nexports.AdapterBase = AdapterBase;","map":{"version":3,"names":["query_1","require","exports","VALIDATED","Symbol","for","alwaysMulti","find","get","update","AdapterBase","constructor","options","id","events","paginate","multi","filters","operators","allowsMulti","method","params","always","getOptions","includes","undefined","adapter","sanitizeQuery","query","filterQuery"],"sources":["C:\\Users\\VARLab ROG 1\\Documents\\workspace\\web\\react-frontend\\node_modules\\@feathersjs\\adapter-commons\\src\\service.ts"],"sourcesContent":["import { Id, Paginated, Query } from '@feathersjs/feathers'\nimport {\n  AdapterParams,\n  AdapterServiceOptions,\n  InternalServiceMethods,\n  PaginationOptions\n} from './declarations'\nimport { filterQuery } from './query'\n\nexport const VALIDATED = Symbol.for('@feathersjs/adapter/sanitized')\n\nconst alwaysMulti: { [key: string]: boolean } = {\n  find: true,\n  get: false,\n  update: false\n}\n\n/**\n * An abstract base class that a database adapter can extend from to implement the\n * `__find`, `__get`, `__update`, `__patch` and `__remove` methods.\n */\nexport abstract class AdapterBase<\n  Result = any,\n  Data = Result,\n  PatchData = Partial<Data>,\n  ServiceParams extends AdapterParams = AdapterParams,\n  Options extends AdapterServiceOptions = AdapterServiceOptions,\n  IdType = Id\n> implements InternalServiceMethods<Result, Data, PatchData, ServiceParams, IdType>\n{\n  options: Options\n\n  constructor(options: Options) {\n    this.options = {\n      id: 'id',\n      events: [],\n      paginate: false,\n      multi: false,\n      filters: {},\n      operators: [],\n      ...options\n    }\n  }\n\n  get id() {\n    return this.options.id\n  }\n\n  get events() {\n    return this.options.events\n  }\n\n  /**\n   * Check if this adapter allows multiple updates for a method.\n   * @param method The method name to check.\n   * @param params The service call params.\n   * @returns Wether or not multiple updates are allowed.\n   */\n  allowsMulti(method: string, params: ServiceParams = {} as ServiceParams) {\n    const always = alwaysMulti[method]\n\n    if (typeof always !== 'undefined') {\n      return always\n    }\n\n    const { multi } = this.getOptions(params)\n\n    if (multi === true || !multi) {\n      return multi\n    }\n\n    return multi.includes(method)\n  }\n\n  /**\n   * Returns the combined options for a service call. Options will be merged\n   * with `this.options` and `params.adapter` for dynamic overrides.\n   *\n   * @param params The parameters for the service method call\n   * @returns The actual options for this call\n   */\n  getOptions(params: ServiceParams): Options {\n    const paginate = params.paginate !== undefined ? params.paginate : this.options.paginate\n\n    return {\n      ...this.options,\n      paginate,\n      ...params.adapter\n    }\n  }\n\n  /**\n   * Returns a sanitized version of `params.query`, converting filter values\n   * (like $limit and $skip) into the expected type. Will throw an error if\n   * a `$` prefixed filter or operator value that is not allowed in `filters`\n   * or `operators` is encountered.\n   *\n   * @param params The service call parameter.\n   * @returns A new object containing the sanitized query.\n   */\n  async sanitizeQuery(params: ServiceParams = {} as ServiceParams): Promise<Query> {\n    // We don't need legacy query sanitisation if the query has been validated by a schema already\n    if (params.query && (params.query as any)[VALIDATED]) {\n      return params.query || {}\n    }\n\n    const options = this.getOptions(params)\n    const { query, filters } = filterQuery(params.query, options)\n\n    return {\n      ...filters,\n      ...query\n    }\n  }\n\n  /**\n   * Retrieve all resources from this service.\n   * Does not sanitize the query and should only be used on the server.\n   *\n   * @param _params - Service call parameters {@link ServiceParams}\n   */\n  abstract _find(_params?: ServiceParams & { paginate?: PaginationOptions }): Promise<Paginated<Result>>\n  abstract _find(_params?: ServiceParams & { paginate: false }): Promise<Result[]>\n  abstract _find(params?: ServiceParams): Promise<Result[] | Paginated<Result>>\n\n  /**\n   * Retrieve a single resource matching the given ID, skipping any service-level hooks.\n   * Does not sanitize the query and should only be used on the server.\n   *\n   * @param id - ID of the resource to locate\n   * @param params - Service call parameters {@link ServiceParams}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#get-id-params|Feathers API Documentation: .get(id, params)}\n   */\n  abstract _get(id: IdType, params?: ServiceParams): Promise<Result>\n\n  /**\n   * Create a new resource for this service, skipping any service-level hooks.\n   * Does not check if multiple updates are allowed and should only be used on the server.\n   *\n   * @param data - Data to insert into this service.\n   * @param params - Service call parameters {@link ServiceParams}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#create-data-params|Feathers API Documentation: .create(data, params)}\n   */\n  abstract _create(data: Data, params?: ServiceParams): Promise<Result>\n  abstract _create(data: Data[], params?: ServiceParams): Promise<Result[]>\n  abstract _create(data: Data | Data[], params?: ServiceParams): Promise<Result | Result[]>\n\n  /**\n   * Completely replace the resource identified by id, skipping any service-level hooks.\n   * Does not sanitize the query and should only be used on the server.\n   *\n   * @param id - ID of the resource to be updated\n   * @param data - Data to be put in place of the current resource.\n   * @param params - Service call parameters {@link ServiceParams}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#update-id-data-params|Feathers API Documentation: .update(id, data, params)}\n   */\n  abstract _update(id: IdType, data: Data, params?: ServiceParams): Promise<Result>\n\n  /**\n   * Merge any resources matching the given ID with the given data, skipping any service-level hooks.\n   * Does not sanitize the query and should only be used on the server.\n   *\n   * @param id - ID of the resource to be patched\n   * @param data - Data to merge with the current resource.\n   * @param params - Service call parameters {@link ServiceParams}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#patch-id-data-params|Feathers API Documentation: .patch(id, data, params)}\n   */\n  abstract _patch(id: null, data: PatchData, params?: ServiceParams): Promise<Result[]>\n  abstract _patch(id: IdType, data: PatchData, params?: ServiceParams): Promise<Result>\n  abstract _patch(id: IdType | null, data: PatchData, params?: ServiceParams): Promise<Result | Result[]>\n\n  /**\n   * Remove resources matching the given ID from the this service, skipping any service-level hooks.\n   * Does not sanitize query and should only be used on the server.\n   *\n   * @param id - ID of the resource to be removed\n   * @param params - Service call parameters {@link ServiceParams}\n   * @see {@link HookLessServiceMethods}\n   * @see {@link https://docs.feathersjs.com/api/services.html#remove-id-params|Feathers API Documentation: .remove(id, params)}\n   */\n  abstract _remove(id: null, params?: ServiceParams): Promise<Result[]>\n  abstract _remove(id: IdType, params?: ServiceParams): Promise<Result>\n  abstract _remove(id: IdType | null, params?: ServiceParams): Promise<Result | Result[]>\n}\n"],"mappings":";;;;;;AAOA,MAAAA,OAAA,GAAAC,OAAA;AAEaC,OAAA,CAAAC,SAAS,GAAGC,MAAM,CAACC,GAAG,CAAC,+BAA+B,CAAC;AAEpE,MAAMC,WAAW,GAA+B;EAC9CC,IAAI,EAAE,IAAI;EACVC,GAAG,EAAE,KAAK;EACVC,MAAM,EAAE;CACT;AAED;;;;AAIA,MAAsBC,WAAW;EAW/BC,YAAYC,OAAgB;IAC1B,IAAI,CAACA,OAAO,GAAG;MACbC,EAAE,EAAE,IAAI;MACRC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,EAAE;MACb,GAAGN;KACJ;EACH;EAEA,IAAIC,EAAEA,CAAA;IACJ,OAAO,IAAI,CAACD,OAAO,CAACC,EAAE;EACxB;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACF,OAAO,CAACE,MAAM;EAC5B;EAEA;;;;;;EAMAK,WAAWA,CAACC,MAAc,EAAEC,MAAA,GAAwB,EAAmB;IACrE,MAAMC,MAAM,GAAGhB,WAAW,CAACc,MAAM,CAAC;IAElC,IAAI,OAAOE,MAAM,KAAK,WAAW,EAAE;MACjC,OAAOA,MAAM;IACf;IAEA,MAAM;MAAEN;IAAK,CAAE,GAAG,IAAI,CAACO,UAAU,CAACF,MAAM,CAAC;IAEzC,IAAIL,KAAK,KAAK,IAAI,IAAI,CAACA,KAAK,EAAE;MAC5B,OAAOA,KAAK;IACd;IAEA,OAAOA,KAAK,CAACQ,QAAQ,CAACJ,MAAM,CAAC;EAC/B;EAEA;;;;;;;EAOAG,UAAUA,CAACF,MAAqB;IAC9B,MAAMN,QAAQ,GAAGM,MAAM,CAACN,QAAQ,KAAKU,SAAS,GAAGJ,MAAM,CAACN,QAAQ,GAAG,IAAI,CAACH,OAAO,CAACG,QAAQ;IAExF,OAAO;MACL,GAAG,IAAI,CAACH,OAAO;MACfG,QAAQ;MACR,GAAGM,MAAM,CAACK;KACX;EACH;EAEA;;;;;;;;;EASA,MAAMC,aAAaA,CAACN,MAAA,GAAwB,EAAmB;IAC7D;IACA,IAAIA,MAAM,CAACO,KAAK,IAAKP,MAAM,CAACO,KAAa,CAAC1B,OAAA,CAAAC,SAAS,CAAC,EAAE;MACpD,OAAOkB,MAAM,CAACO,KAAK,IAAI,EAAE;IAC3B;IAEA,MAAMhB,OAAO,GAAG,IAAI,CAACW,UAAU,CAACF,MAAM,CAAC;IACvC,MAAM;MAAEO,KAAK;MAAEX;IAAO,CAAE,GAAG,IAAAjB,OAAA,CAAA6B,WAAW,EAACR,MAAM,CAACO,KAAK,EAAEhB,OAAO,CAAC;IAE7D,OAAO;MACL,GAAGK,OAAO;MACV,GAAGW;KACJ;EACH;;AA5FF1B,OAAA,CAAAQ,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}